diff --git a/node_modules/prismarine-registry/.github/workflows/ci.yml b/node_modules/prismarine-registry/.github/workflows/ci.yml
index 9a2c8b5..74edbe9 100644
--- a/node_modules/prismarine-registry/.github/workflows/ci.yml
+++ b/node_modules/prismarine-registry/.github/workflows/ci.yml
@@ -13,7 +13,7 @@ jobs:
 
     strategy:
       matrix:
-        node-version: [14.x]
+        node-version: [22.x]
 
     steps:
     - uses: actions/checkout@v2
@@ -26,5 +26,11 @@ jobs:
       with:
         java-version: 17
         java-package: jre
+    # Old versions of bedrock use old libssl that Ubuntu no longer ships with; need manual install
+    - name: (Linux) Install libssl 1.1
+      if: runner.os == 'Linux'
+      run: |
+        wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
+        sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
     - run: npm install
     - run: npm test
\ No newline at end of file
diff --git a/node_modules/prismarine-registry/.github/workflows/publish.yml b/node_modules/prismarine-registry/.github/workflows/publish.yml
index 387db40..f5e18ab 100644
--- a/node_modules/prismarine-registry/.github/workflows/publish.yml
+++ b/node_modules/prismarine-registry/.github/workflows/publish.yml
@@ -13,7 +13,7 @@ jobs:
     - name: Set up Node.js
       uses: actions/setup-node@master
       with:
-        node-version: 14.0.0
+        node-version: 22.0.0
     - id: publish
       uses: JS-DevTools/npm-publish@v1
       with:
diff --git a/node_modules/prismarine-registry/.gitignore b/node_modules/prismarine-registry/.gitignore
new file mode 100644
index 0000000..86bf329
--- /dev/null
+++ b/node_modules/prismarine-registry/.gitignore
@@ -0,0 +1,6 @@
+node_modules/
+package-lock.json
+.vscode
+test/**/server_*
+# mc test server
+**/versions/*/*.json
\ No newline at end of file
diff --git a/node_modules/prismarine-registry/.npmrc b/node_modules/prismarine-registry/.npmrc
new file mode 100644
index 0000000..43c97e7
--- /dev/null
+++ b/node_modules/prismarine-registry/.npmrc
@@ -0,0 +1 @@
+package-lock=false
diff --git a/node_modules/prismarine-registry/README.md b/node_modules/prismarine-registry/README.md
index 4f6433d..4d2b853 100644
--- a/node_modules/prismarine-registry/README.md
+++ b/node_modules/prismarine-registry/README.md
@@ -47,24 +47,46 @@ Mapping to dimension data object containing dimension `name`, `minY` and `height
 
 #### loadItemStates / writeItemStates
 
-* loads/writes data from an item states array inside the bedrock start game packet.
+* loads/writes data from an item states array inside the bedrock start game and/or item registry packet.
 
 ```js
-// In a client
+// Client < 1.21.70
 const { createClient } = require('bedrock-protocol');
-const registry = require('prismarine-registry')('bedrock_1.19.50');
+const registry = require('prismarine-registry')('bedrock_1.21.0');
+const client = createClient({
+  'host': '127.0.0.1'
+})
+client.on('start_game', ({block_network_ids_are_hashes, itemstates }) => {
+  registry.handleStartGame({block_network_ids_are_hashes, itemstates});
+})
 
+// Client >= 1.21.70
+const { createClient } = require('bedrock-protocol');
+const registry = require('prismarine-registry')('bedrock_1.21.90');
 const client = createClient({
   'host': '127.0.0.1'
 })
+client.on('start_game', (params) => {
+  registry.handleStartGame(params);
+})
+client.on('item_registry', ({ itemstates }) => {
+  registry.handleItemRegistry(itemstates);
+})
+```
 
-client.on('start_game', ({ itemstates }) => {
-  registry.loadItemStates(itemstates);
+```js
+// Server < 1.21.70
+server.on('connect', (client) => {
+  const block_network_ids_are_hashes: boolean = false;
+  const itemstates = registry.writeItemStates()
+  client.write('start_game', { ...startGamePacket, block_network_ids_are_hashes, itemstates });
 })
 
-// In a server
+// Server >= 1.21.70
 server.on('connect', (client) => {
+  const block_network_ids_are_hashes: boolean = false;
+  client.write('start_game', { ...startGamePacket, block_network_ids_are_hashes });
   const itemstates = registry.writeItemStates()
-  client.write('start_game', { ...startGamePacket, itemstates })
+  client.write('item_registry', { itemstates });
 })
 ```
\ No newline at end of file
diff --git a/node_modules/prismarine-registry/lib/bedrock/index.js b/node_modules/prismarine-registry/lib/bedrock/index.js
index 8cb3970..b80db89 100644
--- a/node_modules/prismarine-registry/lib/bedrock/index.js
+++ b/node_modules/prismarine-registry/lib/bedrock/index.js
@@ -3,9 +3,15 @@ const buildIndexFromArray = require('../indexer')
 module.exports = (data) => {
   function loadItemStates (itemStates) {
     const items = []
-    for (const item of itemStates) {
-      const name = item.name.replace('minecraft:', '')
-      items.push({ ...data.itemsByName[name], name, id: item.runtime_id })
+    for (const itemState of itemStates) {
+      const name = itemState.name.replace('minecraft:', '')
+      items.push({
+        ...data.itemsByName[name],
+        name,
+        id: itemState.runtime_id,
+        nbt: itemState.nbt,
+        version: itemState.version
+      })
     }
     data.itemsArray = items
     data.items = buildIndexFromArray(data.itemsArray, 'id')
@@ -29,7 +35,10 @@ module.exports = (data) => {
 
   return {
     handleStartGame (packet) {
-      loadItemStates(packet.itemstates)
+      if (packet.itemstates != null) {
+        loadItemStates(packet.itemstates)
+      }
+
       if (this.supportFeature('blockHashes') && packet.block_network_ids_are_hashes) {
         loadHashedRuntimeIds(this)
       } else {
@@ -37,6 +46,12 @@ module.exports = (data) => {
       }
     },
 
+    handleItemRegistry (packet) {
+      if (packet.itemstates) {
+        loadItemStates(packet.itemstates)
+      }
+    },
+
     writeItemStates () {
       const itemstates = []
       for (const item of data.itemsArray) {
@@ -47,7 +62,21 @@ module.exports = (data) => {
           ns = 'minecraft'
         }
 
-        itemstates.push({ name: `${ns}:${name}`, runtime_id: item.id, component_based: ns !== 'minecraft' })
+        const itemState = {
+          name: `${ns}:${name}`,
+          runtime_id: item.id,
+          component_based: ns !== 'minecraft'
+        }
+
+        if (item.version !== undefined) {
+          itemState.version = item.version
+        }
+
+        if (item.nbt !== undefined) {
+          itemState.nbt = item.nbt
+        }
+
+        itemstates.push(itemState)
       }
 
       return itemstates
diff --git a/node_modules/prismarine-registry/lib/index.d.ts b/node_modules/prismarine-registry/lib/index.d.ts
index d413b20..943c6f2 100644
--- a/node_modules/prismarine-registry/lib/index.d.ts
+++ b/node_modules/prismarine-registry/lib/index.d.ts
@@ -10,6 +10,7 @@ declare namespace loader {
   
   export interface RegistryBedrock extends IndexedData {
     handleStartGame(packet: any): void;
+    handleItemRegistry(packet: any): void;
     writeItemStates(): ItemState[];
   }
   
diff --git a/node_modules/prismarine-registry/test/mcbedrock.js b/node_modules/prismarine-registry/test/mcbedrock.js
index c90805d..ddfc875 100644
--- a/node_modules/prismarine-registry/test/mcbedrock.js
+++ b/node_modules/prismarine-registry/test/mcbedrock.js
@@ -1,31 +1,49 @@
 const Registry = require('prismarine-registry')
 const collectPackets = require('./util/collectBedrockPackets')
+const { versions } = require('minecraft-data')
 const assert = require('assert')
 
 async function main (version = '1.19.63') {
   const registry = Registry(`bedrock_${version}`)
-  let loggedIn = false
+  const Versions = Object.fromEntries(versions.bedrock.filter(e => e.releaseType === 'release').map(e => [e.minecraftVersion, e.version]))
+
+  let itemstates
   const handlers = {
     start_game (version, params) {
-      console.log('Loading item palette and custom blocks')
+      const action = params.itemstates
+        ? 'item palette and custom blocks'
+        : 'custom blocks'
+
+      console.log(`Loading ${action}`)
       registry.handleStartGame(params)
+      itemstates = params.itemstates
 
-      console.log('Loaded item palette', registry.items)
+      console.log(`loaded ${action}`)
+    },
+    item_registry (version, params) {
+      console.log('Loading item palette', registry.items)
 
-      const reEncoded = registry.writeItemStates()
-      assert.deepEqual(
-        reEncoded.sort((a, b) => a.runtime_id - b.runtime_id),
-        params.itemstates.sort((a, b) => a.runtime_id - b.runtime_id)
-      )
-      console.log('Re-encoded item palette')
+      registry.handleItemRegistry(params)
+      itemstates = params.itemstates
 
-      loggedIn = true
+      console.log('Loaded item palette', registry.items)
     }
   }
 
-  await collectPackets(version, Object.keys(handlers), (name, params) => handlers[name](version, params))
-  await new Promise((resolve) => setTimeout(resolve, 30000))
-  if (!loggedIn) {
+  const packets = Versions[version] >= Versions['1.21.70']
+    ? ['start_game', 'item_registry']
+    : ['start_game']
+
+  await collectPackets(version, packets, (name, params) => handlers[name](version, params))
+
+  const reEncoded = registry.writeItemStates()
+  reEncoded.sort((a, b) => a.runtime_id - b.runtime_id)
+  itemstates.sort((a, b) => a.runtime_id - b.runtime_id)
+
+  assert.deepEqual(reEncoded[0], itemstates[0])
+  console.log('Re-encoded item palette')
+
+  if (!itemstates) {
     throw new Error('Did not login')
   }
 }
diff --git a/node_modules/prismarine-registry/test/mcbedrock.test.js b/node_modules/prismarine-registry/test/mcbedrock.test.js
index f565970..d8edad2 100644
--- a/node_modules/prismarine-registry/test/mcbedrock.test.js
+++ b/node_modules/prismarine-registry/test/mcbedrock.test.js
@@ -1,13 +1,17 @@
 /* eslint-env mocha */
 
-const SUPPORTED_VERSIONS = ['1.17.10', '1.18.0', '1.18.11', '1.18.30', '1.19.1', '1.19.10']
+const SUPPORTED_VERSIONS = ['1.17.10', '1.18.0', '1.18.11', '1.18.30', '1.19.1', '1.19.10', '1.21.70']
 const test = require('./mcbedrock')
+const { sleep } = require('./util/sleep')
 
 describe('mcbedrock', function () {
-  this.timeout(18000 * 10)
+  const vcount = SUPPORTED_VERSIONS.length
+  this.timeout(vcount * 80 * 1000)
 
   for (const version of SUPPORTED_VERSIONS) {
-    // skipped bedrock because it times out; fix in https://github.com/PrismarineJS/prismarine-registry/issues/43
-    it.skip('works on ' + version, () => test(version))
+    it('works on ' + version, async () => {
+      await test(version)
+      await sleep(100)
+    })
   }
 })
diff --git a/node_modules/prismarine-registry/test/util/collectBedrockPackets.js b/node_modules/prismarine-registry/test/util/collectBedrockPackets.js
index 9b8b3e4..6c7bd81 100644
--- a/node_modules/prismarine-registry/test/util/collectBedrockPackets.js
+++ b/node_modules/prismarine-registry/test/util/collectBedrockPackets.js
@@ -1,52 +1,77 @@
 const bedrock = require('bedrock-protocol')
-const { startServer } = require('minecraft-bedrock-server')
+const { startServerAndWait2 } = require('minecraft-bedrock-server')
 const debug = require('debug')('prismarine-registry')
 const path = require('path')
+const { getPort } = require('./getPort')
+const { waitFor } = require('./waitFor')
+const { sleep } = require('./sleep')
 
 async function collectPackets (version, names = ['start_game'], cb) {
-  const collected = []
-  const server = await new Promise((resolve) => {
-    const server = startServer(version, () => resolve(server), {
-      'online-mode': false,
-      'server-port': 19130,
-      path: path.join(__dirname, `server_bedrock_${version}`)
-    })
+  const [port, v6] = [await getPort(), await getPort()]
+  console.log('Starting vanilla server', version, 'on port', port, v6)
+  const server = await startServerAndWait2(version, 1000 * 220, {
+    'online-mode': false,
+    'server-port': port,
+    'server-portv6': v6,
+    path: path.join(__dirname, `server_bedrock_${version}`)
   })
+  console.log('Started server')
 
-  console.log('Started server', version)
+  await sleep(200)
 
   const client = bedrock.createClient({
-    version,
     host: '127.0.0.1',
-    port: 19130,
+    port,
     username: 'test',
-    offline: true
+    version,
+    raknetBackend: 'raknet-native',
+    offline: true,
+    skipPing: true
   })
 
+  console.log('Started client. Connecting to server')
+
   let clientConnected = false
+  const collected = []
+  await waitFor((resolve) => {
+    client.on('join', () => {
+      console.log('[client] Client connected')
+      clientConnected = true
+      stopIfDone()
+    })
 
-  client.on('join', () => {
-    console.log('[client] Client connected')
-    clientConnected = true
-  })
+    client.on('packet', ({ name }) => debug('[client] -> ', name))
 
-  for (const name of names) {
-    client.on(name, (packet) => {
-      cb(name, packet)
-      collected.push(packet)
+    client.on('error', (err) => {
+      console.error('[client]', err)
+      resolve('timeout')
     })
-  }
+    client.on('end', () => console.log('Bot disconnected.'))
 
-  client.on('packet', ({ name }) => debug('[client] -> ', name))
+    for (const name of names) {
+      client.on(name, (packet) => {
+        cb(name, packet)
+        collected.push(packet)
+        stopIfDone()
+      })
+    }
 
-  setTimeout(() => {
-    console.log('Stopping server', version)
-    server.kill()
-    client.close()
-    if (!clientConnected) {
-      throw new Error('Client never connected')
+    function stopIfDone () {
+      if (clientConnected && collected.length === names.length) {
+        console.log('✔ Got all packets')
+        console.log('Stopping server', version)
+        server.kill()
+        client.close()
+        resolve()
+      }
     }
-  }, 9000)
+  }, 1000 * 60, () => {
+    client.close()
+    server.kill()
+    throw Error('❌ client timed out ')
+  })
+
+  console.log('Stopping server', version)
 }
 
 module.exports = collectPackets
diff --git a/node_modules/prismarine-registry/test/util/getPort.js b/node_modules/prismarine-registry/test/util/getPort.js
new file mode 100644
index 0000000..9d308b2
--- /dev/null
+++ b/node_modules/prismarine-registry/test/util/getPort.js
@@ -0,0 +1,17 @@
+const net = require('net')
+
+const getPort = () => new Promise(resolve => {
+  const server = net.createServer()
+  server.listen(0, '127.0.0.1')
+  server.on('listening', () => {
+    const { port } = server.address()
+    server.close(() => {
+      // Wait a bit for port to free as we try to bind right after freeing it
+      setTimeout(() => {
+        resolve(port)
+      }, 200)
+    })
+  })
+})
+
+module.exports = { getPort }
diff --git a/node_modules/prismarine-registry/test/util/sleep.js b/node_modules/prismarine-registry/test/util/sleep.js
new file mode 100644
index 0000000..f21f538
--- /dev/null
+++ b/node_modules/prismarine-registry/test/util/sleep.js
@@ -0,0 +1,5 @@
+function sleep (ms) {
+  return new Promise(resolve => setTimeout(resolve, ms))
+}
+
+module.exports = { sleep }
diff --git a/node_modules/prismarine-registry/test/util/waitFor.js b/node_modules/prismarine-registry/test/util/waitFor.js
new file mode 100644
index 0000000..2062f6a
--- /dev/null
+++ b/node_modules/prismarine-registry/test/util/waitFor.js
@@ -0,0 +1,12 @@
+async function waitFor (cb, withTimeout, onTimeout) {
+  let t
+  const ret = await Promise.race([
+    new Promise((resolve, reject) => cb(resolve, reject)),
+    new Promise(resolve => { t = setTimeout(() => resolve('timeout'), withTimeout) })
+  ])
+  clearTimeout(t)
+  if (ret === 'timeout') await onTimeout()
+  return ret
+}
+
+module.exports = { waitFor }
